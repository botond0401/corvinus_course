reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib.pyplot as mp
import seaborn as sb
import sklearn as sk
from sklearn import preprocessing as pp
from sklearn import tree
from sklearn import linear_model as lm
from sklearn.ensemble import RandomForestRegressor as rf, RandomForestClassifier as rc, AdaBoostClassifer as ab
from sklearn.ensemble import GradientBoostingRegressor as gbr
from sklearn.model_selection import cross_validate as cv
from sklearn.model_selection import GridSearchCV as gs
from sklearn.ensemble import RandomForestRegressor as rf, RandomForestClassifier as rc, AdaBoostClassifier as ab
bank=pd.read_csv("bankloan.csv")
emp=pd.read_csv("employee.csv")
bank=pd.get_dummies(bank, drop_first=True)
Xb=bank.drop(columns=['default_yes'])
yb=bank['default_yes']
emp=pd.get_dummies(emp, drop_first=True)
Xe=emp.drop(columns=['salary'])
ye=np.log(emp['salary'])
```
View(bank)
Xb=bank.drop(columns=['default_Yes'])
yb=bank['default_Yes']
emp=pd.get_dummies(emp, drop_first=True)
Xe=emp.drop(columns=['salary'])
ye=np.log(emp['salary'])
cross_val = cv(lm.LinearRegression(), xe, ye, cv = 10, scoring='r2')
corss_val['test_score'].mean()
cross_val = cv(lm.LinearRegression(), Xe, ye, cv = 10, scoring='r2')
corss_val['test_score'].mean()
cross_val = cv(lm.LinearRegression(), Xe, ye, cv = 10, scoring='r2')
cross_val['test_score'].mean()
racs={'max_depth': np.arange(start=1, stop=15, step=1)}
tunes = gs(tree.DecisionTreeClassifier(), racs, scoring='accuracy', cv=10)
tunes.fit(xb, yb)
result = tunes.cv_results_
mp.cla()
sb.lineplot(x='param_max_depth', y='mean_test_score', data=result)
mp.show()
result['mean_test_result']
racs={'max_depth': np.arange(start=1, stop=15, step=1)}
tunes = gs(tree.DecisionTreeClassifier(), racs, scoring='accuracy', cv=10)
tunes.fit(Xb, yb)
result = tunes.cv_results_
mp.cla()
sb.lineplot(x='param_max_depth', y='mean_test_score', data=result)
mp.show()
result['mean_test_result']
import matplotlib.pyplot as plt
racs={'max_features': np.arange(start=1, stop=11, step=1)}
tunes = gs(rc(n_estimators=500), racs, scoring='accuracy', cv=10)
tunes.fit(Xb, yb)
result = tunes.cv_results_
plt.cla()
sb.lineplot(x='param_max_depth', y='mean_test_score', data=result)
plt.show()
result['mean_test_score']
racs={'n_estimators': np.arange(start=1, stop=100, step=1)}
tunes = gs(ab(), racs, scoring='accuracy', cv=10)
tunes.fit(Xb, yb)
result = tunes.cv_results_
plt.cla()
sb.lineplot(x='param_max_depth', y='mean_test_score', data=result)
plt.show()
result['mean_test_score'].max()
result['mean_test_score'].argmax()
best = rc(max_features=5).fit(Xb, yb)
best.predict(Xb)
